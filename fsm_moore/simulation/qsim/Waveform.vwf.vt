// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/30/2018 09:28:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fsm_moore
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fsm_moore_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg bit0EA;
reg bit1EA;
reg CLK;
// wires                                               
wire Y;

// assign statements (if any)                          
fsm_moore i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.bit0EA(bit0EA),
	.bit1EA(bit1EA),
	.CLK(CLK),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// A
initial
begin
	repeat(12)
	begin
		A = 1'b0;
		A = #40000 1'b1;
		# 40000;
	end
	A = 1'b0;
end 

// bit0EA
initial
begin
	bit0EA = 1'b0;
end 

// bit1EA
initial
begin
	bit1EA = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
endmodule

