-- Quartus Prime VHDL Template
-- Single-Port ROM

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity single_port_rom is

	generic 
	(
		DATA_WIDTH : natural := 8;
		ADDR_WIDTH : natural := 8
	);

	port 
	(
		clk		: in std_logic;
		addr	: in natural range 0 to 2**ADDR_WIDTH - 1;
		q		: out std_logic_vector((DATA_WIDTH -1) downto 0)
	);

end entity;

architecture rtl of single_port_rom is

	-- Build a 2-D array type for the ROM
	subtype word_t is std_logic_vector((DATA_WIDTH-1) downto 0);
	type memory_t is array(2**ADDR_WIDTH-1 downto 0) of word_t;

	function init_rom
		return memory_t is 
		variable tmp : memory_t := (others => (others => '0'));
	begin 
		--for addr_pos in 0 to 2**ADDR_WIDTH - 1 loop 
			-- Initialize each address with the address itself
			--tmp(addr_pos) := std_logic_vector(to_unsigned(addr_pos, DATA_WIDTH));
		--end loop;
			--tmp := "01000011011000010111001001101100011011110111001100001101000010100100000101000001";
			tmp(0) := (others => '0');
			tmp(1) := (others => '0');
			tmp(2) := (others => '0');
			tmp(3) := std_logic_vector(to_unsigned(64, DATA_WIDTH));
--			tmp(4) := "‭01101110‬";
--			tmp(5) := "‭01101001‬";
--			tmp(6) := "‭01101111‬";
--			tmp(7) := "‭00100000‬";
--			tmp(8) := "‭01000011‬";
--			tmp(9) := "‭01100001‬";
--			tmp(10) := "‭01110010‬";
--			tmp(11) := "‭01101100‬";
--			tmp(12) := "‭01101111‬";
--			tmp(13) := "‭01110011‬";

		return tmp;
	end init_rom;	 

	-- Declare the ROM signal and specify a default value.	Quartus Prime
	-- will create a memory initialization file (.mif) based on the 
	-- default value.
	signal rom : memory_t := init_rom;

begin

	process(clk)
	begin
	if(rising_edge(clk)) then
		q <= rom(addr);
	end if;
	end process;

end rtl;

