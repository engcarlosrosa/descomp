// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2018 14:49:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          temporizador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module temporizador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg A2;
reg B;
reg B2;
reg C;
reg C2;
reg D;
// wires                                               
wire Y;
wire Y2;

// assign statements (if any)                          
temporizador i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A2(A2),
	.B(B),
	.B2(B2),
	.C(C),
	.C2(C2),
	.D(D),
	.Y(Y),
	.Y2(Y2)
);
initial 
begin 
#120000 $finish;
end 

// A
always
begin
	A = 1'b0;
	A = #20000 1'b1;
	#20000;
end 

// B
always
begin
	B = 1'b0;
	B = #10000 1'b1;
	#10000;
end 

// C
initial
begin
	C = 1'b0;
	C = #40000 1'b1;
	C = #40000 1'b0;
end 

// D
initial
begin
	D = 1'b0;
	D = #80000 1'b1;
end 

// A2
always
begin
	A2 = 1'b0;
	A2 = #20000 1'b1;
	#20000;
end 

// B2
always
begin
	B2 = 1'b0;
	B2 = #10000 1'b1;
	#10000;
end 

// C2
always
begin
	C2 = 1'b0;
	C2 = #10000 1'b1;
	#10000;
end 
endmodule

