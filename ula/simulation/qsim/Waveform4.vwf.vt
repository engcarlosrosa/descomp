// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/26/2018 15:58:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          circuito_combinacional
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuito_combinacional_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] a_ula_in;
reg [4:0] b_ula_in;
reg CLK;
reg [1:0] func_ula_in;
// wires                                               
wire flag_ula_out;
wire [4:0] q_ula_out;

// assign statements (if any)                          
circuito_combinacional i1 (
// port map - connection between master ports and signals/registers   
	.a_ula_in(a_ula_in),
	.b_ula_in(b_ula_in),
	.CLK(CLK),
	.flag_ula_out(flag_ula_out),
	.func_ula_in(func_ula_in),
	.q_ula_out(q_ula_out)
);
initial 
begin 
#1000000 $finish;
end 
// a_ula_in[ 4 ]
initial
begin
	a_ula_in[4] = 1'b0;
end 
// a_ula_in[ 3 ]
initial
begin
	a_ula_in[3] = 1'b0;
end 
// a_ula_in[ 2 ]
initial
begin
	a_ula_in[2] = 1'b0;
end 
// a_ula_in[ 1 ]
initial
begin
	a_ula_in[1] = 1'b0;
end 
// a_ula_in[ 0 ]
initial
begin
	a_ula_in[0] = 1'b0;
end 
// b_ula_in[ 4 ]
initial
begin
	b_ula_in[4] = 1'b0;
end 
// b_ula_in[ 3 ]
initial
begin
	b_ula_in[3] = 1'b0;
end 
// b_ula_in[ 2 ]
initial
begin
	b_ula_in[2] = 1'b0;
end 
// b_ula_in[ 1 ]
initial
begin
	b_ula_in[1] = 1'b0;
end 
// b_ula_in[ 0 ]
initial
begin
	b_ula_in[0] = 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// func_ula_in[ 1 ]
initial
begin
	func_ula_in[1] = 1'b1;
end 
// func_ula_in[ 0 ]
initial
begin
	func_ula_in[0] = 1'b0;
end 
endmodule

